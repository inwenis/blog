{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My blog about programming &amp; other stuff","text":"<p>Enjoy</p> <p>You can reach me at <code>inwenis at gmail.com</code></p>"},{"location":"post8/","title":"node packages updating","text":""},{"location":"post8/#tldr","title":"tl;dr","text":"<ol> <li><code>&gt; npm install depcheck -g</code> - install <code>depcheck</code> globally</li> <li><code>&gt; depcheck</code> - check for redundant packages</li> <li><code>&gt; npm un this-redundant-package</code> - uninstall redundant packages (repeat for all redundant packages)</li> <li>Create a pull-request <code>remove-redundant-packages</code></li> </ol> <ol> <li><code>&gt; npm i</code> - make order in <code>node_modules</code></li> <li><code>&gt; npm audit</code> - see vulnerability issues</li> <li><code>&gt; npm audit fix</code> - fix vulnerability issues that don't require attention</li> <li>Create a pull-request <code>fix-vulnerability-issues</code></li> </ol> <ol> <li><code>&gt; npm i npm-check-updates -g</code> - install <code>npm-check-updates</code> globally</li> <li><code>&gt; npm-check-updates</code> - see how outdated packages are</li> <li><code>&gt; npm outdated</code> - see how outdated packages are</li> <li><code>&gt; npm update --save</code> - update packages respecting your semver constraints from <code>packages.json</code></li> <li>If you have packages that use major version <code>0.*.*</code> you'll need to manually update these now<ul> <li><code>&gt; npm install that-one-package@latest</code></li> </ul> </li> <li>Create a pull-request <code>update-packages-minor</code></li> </ol> <p>If you're brave and can test/run you project easily:</p> <ol> <li><code>ncu -u</code> - updates <code>packages.json</code> to all latest versions as shown by <code>npm-check-updates</code><ul> <li>this might introduce breaking changes</li> </ul> </li> <li><code>npm i</code> - update <code>package-lock.json</code></li> <li>Test your project.</li> <li>Create a pull-request <code>update-packages-major</code></li> </ol> <p>If you're not brave or can't just YOLO and update all major versions:</p> <ol> <li><code>npm-check-updates</code> - check again what is left to update</li> <li><code>npm i that-package@latest</code> - update major version of of <code>that-package</code></li> <li>Test your project.<ul> <li>.js is dynamically typed so you might have just updated a package that breaks your project but you'll not know until you run your code</li> </ul> </li> <li>Repeat for all packages.</li> <li>Create a pull-request <code>update-packages-major</code></li> </ol>"},{"location":"post8/#longer-read","title":"longer read","text":"<p>Need to update dependencies in a node js project? Here are my notes on this.</p> <p><code>&gt; npm i</code> (<code>npm install</code>)</p> <pre><code>&gt; npm i\n\nadded 60 packages, removed 124 packages, changed 191 packages, and audited 522 packages in 13s\n\n96 packages are looking for funding\n  run `npm fund` for details\n\n10 vulnerabilities (2 low, 7 moderate, 1 high)\n\nTo address issues that do not require attention, run:\n  npm audit fix\n\nTo address all issues possible (including breaking changes), run:\n  npm audit fix --force\n\nSome issues need review, and may require choosing\na different dependency.\n\nRun `npm audit` for details.\n</code></pre> <ul> <li>installs missing packages in <code>node_modules</code></li> <li>removes redundant packages in <code>node_modules</code></li> <li>installs correct versions of mismatched packages (if <code>packages-lock.json</code> wants a different version than found in <code>node_modules</code>)</li> <li>shows what is going on with packaged in your project</li> </ul> <p><code>&gt; npm audit</code> - shows a report on vulnerability issues in your dependencies</p> <p><code>&gt; npm audit fix</code> - updates packages to address vulnerability issues (updates that do not require attention)</p> <p><code>&gt; npm outdated</code> - shows a table with your packages and versions</p> <pre><code>$ npm outdated\nPackage      Current   Wanted   Latest  Location                  Depended by\nglob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name\nnothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name\nnpm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name\nlocal-dev      0.0.3   linked   linked  local-dev                 dependent-package-name\nonce           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name\n</code></pre> <ul> <li><code>Current</code> - what is in <code>nodes_modules</code></li> <li><code>Wanted</code> - most recent version that respect the version constraint from <code>packages.json</code></li> <li><code>Latest</code> - latest version from npm registry</li> </ul> <p>To update to latest minor+patch versions of your dependencies (<code>Wanted</code>) - <code>npm outdated</code> shows all you need to know but I prefer the output of <code>npm-check-updates</code></p> <p><code>&gt; npm i npm-check-updates -g</code> (<code>-g</code> -&gt; global mode - package will be available on your whole machine)</p> <p><code>&gt; npm-check-updates</code> - shows where an update will be a major/minor/patch update (I like the colors)</p> <pre><code>Checking C:\\git\\blog\\package.json\n[====================] 39/39 100%\n\n @azure/storage-blob         ^12.5.0  \u2192      ^12.17.0\n adm-zip                     ^0.4.16  \u2192       ^0.5.12\n axios                       ^0.27.2  \u2192        ^1.6.8\n basic-ftp                    ^5.0.1  \u2192        ^5.0.5\n cheerio                 ^1.0.0-rc.6  \u2192  ^1.0.0-rc.12\n eslint                      ^8.12.0  \u2192        ^9.2.0\n eslint-config-prettier       ^8.5.0  \u2192        ^9.1.0\n eslint-plugin-import        ^2.25.4  \u2192       ^2.29.1\n fast-xml-parser              ^4.2.4  \u2192        ^4.3.6\n humanize-duration           ^3.27.3  \u2192       ^3.32.0\n iconv                        ^3.0.0  \u2192        ^3.0.1\n jsonwebtoken                 ^9.0.0  \u2192        ^9.0.2\n luxon                        ^3.4.3  \u2192        ^3.4.4\n</code></pre>"},{"location":"post8/#let-us-update-something","title":"Let us update something","text":"<p><code>&gt; npm update</code> - perform updates respecting your semver constraints and update <code>package-lock.json</code></p> <p><code>&gt; npm update --save</code> - same as above but also update <code>packages.json</code>, use this one always</p> <p>The behavior for packages with major version <code>0.*.*</code> is different than for versions &gt;=<code>1.0.0</code> (see <code>npm help update</code>)</p> <p><code>npm update</code> will most likely bump all minor and patch versions for you.</p> <p>You can run <code>npm update --save</code> often.</p>"},{"location":"post8/#what-do-the-symbols-in-packagejson-mean","title":"What do the symbols in <code>package.json</code> mean?","text":"<p>https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json/25861938#25861938</p>"},{"location":"post8/#npm-update-save-vs-npm-audit-fix","title":"<code>npm update --save</code> vs <code>npm audit fix</code>","text":"<p><code>npm audit fix</code> will only update packages to fix vulnerability issues</p> <p><code>npm update --save</code> will update all packages it can (respecting semver constraints)</p>"},{"location":"post8/#do-i-have-unused-dependencies","title":"Do I have unused dependencies?","text":"<p><code>&gt; npm install depcheck -g</code></p> <p><code>&gt; depcheck</code> - shows unused dependencies. <code>depcheck</code> scans for <code>require</code>/<code>import</code> statements in your code so you might be utilizing a package differently but <code>depcheck</code> will consider it unused (ex. when you import packages using <code>importLazy</code>).</p>"},{"location":"post8/#npm-check","title":"npm-check","text":"<p><code>&gt; npm i npm-check -g</code></p> <p><code>&gt; npm-check</code> - a different tool to help with dependencies (I didn't use it)</p>"},{"location":"post8/#honorable-mentions","title":"honorable mentions","text":"<p><code>&gt; npm ls</code> - list installed packages (from <code>node_modules</code>)</p> <p><code>&gt; npm ls axios</code> - show all versions of axios and why we have them</p> <p><code>npm ls</code> will not show you origin of not-installed optional dependencies.</p> <p>Consider this - you devleop on a <code>win</code> maching and deploy your solution to a <code>linux</code> box. On windows (see below) you might think <code>node-gyp-build</code> is not used in your solution.</p> <pre><code>&gt; npm ls node-gyp-build\ntest-npm@1.0.0 C:\\git\\test-npm\n`-- (empty)\n</code></pre> <p>But on a linux box it will be used:</p> <pre><code>&gt; npm ls node-gyp-build\nnpm-test-proj@1.0.0 /git/npm-test-proj\n\u2514\u2500\u252c kafka-lz4-lite@1.0.5\n  \u2514\u2500\u252c piscina@3.2.0\n    \u2514\u2500\u252c nice-napi@1.0.2\n      \u2514\u2500\u2500 node-gyp-build@4.8.1\n</code></pre>"},{"location":"post9/","title":"Notes on keys, certs, certificates, HTTPS, SSL, SSH, TLS","text":"<p>key != cert (a key is different from a certificate)</p> <p>Keys are used to encrypt connections, certs are used to verify that the key owner is who he says he is.</p>"},{"location":"post9/#certificate-aka-cert","title":"Certificate aka cert","text":"<p>A certificate proves that a public key belongs to a given entity. The cert includes: - public key - information about the key - CA's signature validating the cert</p> <p>CA's signature basically says \"I confirm that this public key belongs to this person/entity\". The signature is made using CA's private key.</p> <p>This is wikipedia certificate which I've exported from my chrome browser. This is the certificate in PEM format.</p> <pre><code>-----BEGIN CERTIFICATE-----\nMIIISzCCB9GgAwIBAgIQB0GeOVg6THbPHqFDR/pfOjAKBggqhkjOPQQDAzBWMQsw\nCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMTAwLgYDVQQDEydEaWdp\nQ2VydCBUTFMgSHlicmlkIEVDQyBTSEEzODQgMjAyMCBDQTEwHhcNMjMxMDE4MDAw\nMDAwWhcNMjQxMDE2MjM1OTU5WjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2Fs\naWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEjMCEGA1UEChMaV2lraW1l\nZGlhIEZvdW5kYXRpb24sIEluYy4xGDAWBgNVBAMMDyoud2lraXBlZGlhLm9yZzBZ\nMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDVh9CEa/2rEO/oGR8YZbr5wOPHcFrG8\nOBQS1BQrHAsxgVn1Z/bnKtE8Hvqup+0GXdZvXYlMa8iw4A+Dz/XTitqjggZcMIIG\nWDAfBgNVHSMEGDAWgBQKvAgpF4ylOW16Ds4zxy6z7fvDejAdBgNVHQ4EFgQUyqwM\nZ6LjhkM/u0PnQdmhhzp43TMwggLtBgNVHREEggLkMIIC4IIPKi53aWtpcGVkaWEu\nb3Jngg13aWtpbWVkaWEub3Jngg1tZWRpYXdpa2kub3Jngg13aWtpYm9va3Mub3Jn\nggx3aWtpZGF0YS5vcmeCDHdpa2luZXdzLm9yZ4INd2lraXF1b3RlLm9yZ4IOd2lr\naXNvdXJjZS5vcmeCD3dpa2l2ZXJzaXR5Lm9yZ4IOd2lraXZveWFnZS5vcmeCDndp\na3Rpb25hcnkub3Jnghd3aWtpbWVkaWFmb3VuZGF0aW9uLm9yZ4IGdy53aWtpghJ3\nbWZ1c2VyY29udGVudC5vcmeCESoubS53aWtpcGVkaWEub3Jngg8qLndpa2ltZWRp\nYS5vcmeCESoubS53aWtpbWVkaWEub3JnghYqLnBsYW5ldC53aWtpbWVkaWEub3Jn\ngg8qLm1lZGlhd2lraS5vcmeCESoubS5tZWRpYXdpa2kub3Jngg8qLndpa2lib29r\ncy5vcmeCESoubS53aWtpYm9va3Mub3Jngg4qLndpa2lkYXRhLm9yZ4IQKi5tLndp\na2lkYXRhLm9yZ4IOKi53aWtpbmV3cy5vcmeCECoubS53aWtpbmV3cy5vcmeCDyou\nd2lraXF1b3RlLm9yZ4IRKi5tLndpa2lxdW90ZS5vcmeCECoud2lraXNvdXJjZS5v\ncmeCEioubS53aWtpc291cmNlLm9yZ4IRKi53aWtpdmVyc2l0eS5vcmeCEyoubS53\naWtpdmVyc2l0eS5vcmeCECoud2lraXZveWFnZS5vcmeCEioubS53aWtpdm95YWdl\nLm9yZ4IQKi53aWt0aW9uYXJ5Lm9yZ4ISKi5tLndpa3Rpb25hcnkub3JnghkqLndp\na2ltZWRpYWZvdW5kYXRpb24ub3JnghQqLndtZnVzZXJjb250ZW50Lm9yZ4INd2lr\naXBlZGlhLm9yZ4IRd2lraWZ1bmN0aW9ucy5vcmeCEyoud2lraWZ1bmN0aW9ucy5v\ncmcwPgYDVR0gBDcwNTAzBgZngQwBAgIwKTAnBggrBgEFBQcCARYbaHR0cDovL3d3\ndy5kaWdpY2VydC5jb20vQ1BTMA4GA1UdDwEB/wQEAwIDiDAdBgNVHSUEFjAUBggr\nBgEFBQcDAQYIKwYBBQUHAwIwgZsGA1UdHwSBkzCBkDBGoESgQoZAaHR0cDovL2Ny\nbDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VExTSHlicmlkRUNDU0hBMzg0MjAyMENB\nMS0xLmNybDBGoESgQoZAaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0\nVExTSHlicmlkRUNDU0hBMzg0MjAyMENBMS0xLmNybDCBhQYIKwYBBQUHAQEEeTB3\nMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wTwYIKwYBBQUH\nMAKGQ2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU0h5YnJp\nZEVDQ1NIQTM4NDIwMjBDQTEtMS5jcnQwDAYDVR0TAQH/BAIwADCCAYAGCisGAQQB\n1nkCBAIEggFwBIIBbAFqAHcA7s3QZNXbGs7FXLedtM0TojKHRny87N7DUUhZRnEf\ntZsAAAGLQ1J6cgAABAMASDBGAiEA5reeeuLSzGPvJQ5hT3Bd8aOVxmIltXMTLhY6\n19qDGWUCIQDO0LMbF3s42tyxgFIOt7rVOpsHe9Sy0wFQQj8BWO0LIQB2AEiw42va\npkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABi0NSegEAAAQDAEcwRQIgYJdu\nBrioIun6FTeQhDxqK2eyZehguOkxScS3nwsGSakCIQC1FyuCpm+QQBRJFSTAnStR\niP+hgGIhgzyZ837usahB0QB3ANq2v2s/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI\n1/urAAABi0NSeg8AAAQDAEgwRgIhAOm1GvY8M4V+tUyjV9/PCj8rcWHUOvfY0a/o\nnsKg/bitAiEA1Vm1pP8CDp7hGcQzBBTscpCVebzWCe8DK231mtv97QUwCgYIKoZI\nzj0EAwMDaAAwZQIwKuOOLjmwGgtjG6SASF4W2e8KtQZANRsYXMXJDGwBCi9fM7Qy\nS9dvlFLwrcDg1gxlAjEA5XwJikbpk/qyQerzeUspuZKhqh1KPuj2uBdp8vicuBxu\nTJUd1W+d3LmikOUgGzil\n-----END CERTIFICATE-----\n\n</code></pre> <p>We can double click the cert file to view it (on Windows) or use many other different tools to view its content.</p> <p>https://stackoverflow.com/questions/9758238/how-to-view-the-contents-of-a-pem-certificate</p> <pre><code>&gt; $cert = New-Object Security.Cryptography.X509Certificates.X509Certificate2([string]\"C:\\Users\\inwen\\Downloads\\_.wikipedia.org.crt\")\n&gt; $cert | select *\n\nEnhancedKeyUsageList : {Server Authentication (1.3.6.1.5.5.7.3.1), Client Authentication (1.3.6.1.5.5.7.3.2)}\nDnsNameList          : {*.wikipedia.org, wikimedia.org, mediawiki.org, wikibooks.org...}\nSendAsTrustedIssuer  : False\nArchived             : False\nExtensions           : {System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid...}\nFriendlyName         :\nIssuerName           : System.Security.Cryptography.X509Certificates.X500DistinguishedName\nNotAfter             : 17/10/2024 01:59:59\nNotBefore            : 18/10/2023 02:00:00\nHasPrivateKey        : False\nPrivateKey           :\nPublicKey            : System.Security.Cryptography.X509Certificates.PublicKey\nRawData              : {48, 130, 8, 75...}\nSerialNumber         : 07419E39583A4C76CF1EA14347FA5F3A\nSubjectName          : System.Security.Cryptography.X509Certificates.X500DistinguishedName\nSignatureAlgorithm   : System.Security.Cryptography.Oid\nThumbprint           : 483F0C71F34AE0EA30D99BD60463DCDAA8F49DFB\nVersion              : 3\nHandle               : 2140299849504\nIssuer               : CN=DigiCert TLS Hybrid ECC SHA384 2020 CA1, O=DigiCert Inc, C=US\nSubject              : CN=*.wikipedia.org, O=\"Wikimedia Foundation, Inc.\", L=San Francisco, S=California, C=US\n</code></pre>"},{"location":"post9/#ssl-tls-ssh-sftp","title":"SSL &amp; TLS &amp; SSH &amp; SFTP","text":"<p>SSH (Secure SHell protocol) - protocol that allows to execute shell commands over a secure connection.</p> <p>SFTP is an extension of SSH. SFTP != FTP over SSH. To connect to a SFTP server you need a private ssh key. The public ssh key (your private key's counterpart) is stored at the server.</p> <p>TLS &amp; SSL - think of SSL as the older/first protocol for secure communication. SSL was outphased by TLS. TLS is THE protocol used by HTTPS for secure connections.</p> <p>Clients can be anonymous in TLS - usually the case on web - the server provides a cert to your browser but you don't need a cert of your own. TLS can be mutual - if the client has a cert the servers will/can validate it.</p>"},{"location":"post9/#putty","title":"PuTTy","text":"<p>PuTTy is free+open source software than can do SSH. PuTTy has its own format of key files -&gt; .ppk</p> <p>ppk - putty private key (ppk can be changed to pem with some software) A PPK file stores a private key, and the corresponding public key. Both are contained in the same file. https://tartarus.org/~simon/putty-snapshots/htmldoc/AppendixC.html</p>"},{"location":"post9/#pem","title":"PEM","text":"<p>Privacy-Enhanced Mail (PEM) is THE file format for exhanging keys, certificates.</p> <ul> <li><code>.cer</code> &amp; <code>.crt</code> - PEM file with a certificate</li> <li><code>.key</code> - PEM with with a private or public key</li> </ul> <p>The file extensions doesn't really matter. Just open the file and see the headers to be sure what it is.</p> <p>To view a pem certificate on Windows - rename it to <code>.crt</code> and double click.</p> <p>You can open a .pem file as plain text as see its content:</p> <pre><code>// pem ignores stuff between the headers so you can put comments here\n\n-----BEGIN RSA PRIVATE KEY-----\nizfrNTmQLnfsLzi2Wb9xPz2Qj9fQYGgeug3N2MkDuVHwpPcgkhHkJgCQuuvT+qZI\nMbS2U6wTS24SZk5RunJIUkitRKeWWMS28SLGfkDs1bBYlSPa5smAd3/q1OePi4ae\ndU6YgWuDxzBAKEKVSUu6pA2HOdyQ9N4F1dI+F8w9J990zE93EgyNqZFBBa2L70h4\nM7DrB0gJBWMdUMoxGnun5glLiCMo2JrHZ9RkMiallS1sHMhELx2UAlP8I1+0Mav8\niMlHGyUW8EJy0paVf09MPpceEcVwDBeX0+G4UQlO551GTFtOSRjcD8U+GkCzka9W\n/SFQrSGe3Gh3SDaOw/4JEMAjWPDLiCglwh0rLIO4VwU6AxzTCuCw3d1ZxQsU6VFQ\nPqHA8haOUATZIrp3886PBThVqALBk9p1Nqn51bXLh13Zy9DZIVx4Z5Ioz/EGuzgR\nd68VW5wybLjYE2r6Q9nHpitSZ4ZderwjIZRes67HdxYFw8unm4Wo6kuGnb5jSSag\nvwBxKzAf3Omn+J6IthTJKuDd13rKZGMcRpQQ6VstwihYt1TahQ/qfJUWPjPcU5ML\n9LkgVwA8Ndi1wp1/sEPe+UlL16L6vO9jUHcueWN7+zSUOE/cDSJyMd9x/ZL8QASA\nETd5dujVIqlINL2vJKr1o4T+i0RsnpfFiqFmBKlFqww/SKzJeChdyEtpa/dJMrt2\n8S86b6zEmkser+SDYgGketS2DZ4hB+vh2ujSXmS8Gkwrn+BfHMzkbtio8lWbGw0l\neM1tfdFZ6wMTLkxRhBkBK4JiMiUMvpERyPib6a2L6iXTfH+3RUDS6A==\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIICMzCCAZygAwIBAgIJALiPnVsvq8dsMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNV\nBAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNVBAcTA2ZvbzEMMAoGA1UEChMDZm9v\nMQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2ZvbzAeFw0xMzAzMTkxNTQwMTlaFw0x\nODAzMTgxNTQwMTlaMFMxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNV\nBAcTA2ZvbzEMMAoGA1UEChMDZm9vMQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2Zv\nbzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAzdGfxi9CNbMf1UUcvDQh7MYB\nOveIHyc0E0KIbhjK5FkCBU4CiZrbfHagaW7ZEcN0tt3EvpbOMxxc/ZQU2WN/s/wP\nxph0pSfsfFsTKM4RhTWD2v4fgk+xZiKd1p0+L4hTtpwnEw0uXRVd0ki6muwV5y/P\n+5FHUeldq+pgTcgzuK8CAwEAAaMPMA0wCwYDVR0PBAQDAgLkMA0GCSqGSIb3DQEB\nBQUAA4GBAJiDAAtY0mQQeuxWdzLRzXmjvdSuL9GoyT3BF/jSnpxz5/58dba8pWen\nv3pj4P3w5DoOso0rzkZy2jEsEitlVM2mLSbQpMM+MUVQCQoiG6W9xuCFuxSrwPIS\npAqEAuV4DNoxQKKWmhVv+J0ptMWD25Pnpxeq5sXzghfJnslJlQND\n-----END CERTIFICATE-----\n</code></pre> <p>Contents between header and footer (<code>-----BEGIN CERTIFICATE-----</code> + <code>-----END CERTIFICATE-----</code>) is base64 encoded. The content can be DER binary data.</p>"},{"location":"post9/#der","title":"DER","text":"<p>Distinguished Encoding Rules - is a way of encoding data structures. A certificate is a data structure containing various entires like <code>validity date</code>, <code>issuer</code>, etc. For certificates to work you need to store this information and transfer it. DER encodes this information is a binary format. This is then after base64 encoded and then it goes into a PEM file.</p>"},{"location":"post9/#x509","title":"X.509","text":"<p>X.509 is the standard defining public key certificates for TLS/SSL (HTTPS)</p>"},{"location":"post9/#pfx","title":"PFX","text":"<p>PFX seems to be Microsoft's complicated file format for storing cryptographic data.</p> <p>base64 offline decoder: https://www.glezen.org/Base64Decoder.html</p> <p>Nice description of certs vs key: https://superuser.com/questions/620121/what-is-the-difference-between-a-certificate-and-a-key-with-respect-to-ssl</p> <p>Generate yourself a certificate: https://getacert.com/index.html</p> <p>Important info on <code>rejectUnauthorized: false</code> and certificates in <code>axios</code>/<code>node</code>: https://stackoverflow.com/questions/51363855/how-to-configure-axios-to-use-ssl-certificate</p> <p>convention - propose     - specify format in secret name     - use plain - not base64 encoded</p>"},{"location":"post9/#lazy-websites","title":"Lazy websites","text":"<p>Website's certificates are usually signed by intermediate CA, which in turn are signed by a trusted root CA. The idea is that the server you connect to send you its certificate with all the intermediate certificates. Your app/machine should have the root CA certificate stored so it can validate the chain of certificates it received from the server (by just validating the root cert sent with its own root CA).</p> <p>Some servers are misconfigured and do not send the intermediate certificates. You do not notice because browsers fill in the gaps for a better browsing experience. However when you try to scrape the same website with ex. node your connection will be rejected.</p>"},{"location":"post9/#donts-for-node","title":"don't's (for node)","text":"<p>Many answers on SO suggest to set <code>NODE_TLS_REJECT_UNAUTHORIZED=0</code> or <code>const httpsAgent = new https.Agent({ rejectUnauthorized: false });</code>. Both are a terrible idea as it tells node to ignore certificate validation. Read more here</p>"},{"location":"post9/#does-for-node","title":"does (for node)","text":"<p>Use NODE_EXTRA_CA_CERTS. Alternatively use a library to programmatically give node the missing certificate link</p> <p>Good read - https://stackoverflow.com/questions/31673587/error-unable-to-verify-the-first-certificate-in-nodejs</p>"},{"location":"post9/#root-ca-stores","title":"root CA stores","text":""},{"location":"post9/#node","title":"Node","text":"<p>It seems everyone has their own root CA store these days. Nodes has a hardcoded list of root CA see:</p> <ul> <li>https://github.com/nodejs/node/blob/main/src/node_root_certs.h</li> <li>https://github.com/nodejs/node/issues/4175</li> </ul>"},{"location":"post9/#windows","title":"Windows","text":"<p>You can view Windows certificates with PowerShell:</p> <pre><code>Get-ChildItem -Recurse Cert:\n</code></pre>"},{"location":"post9/#chrome","title":"Chrome","text":"<p>https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md</p> <p>If you would like to become chrome's trusted CA - https://www.chromium.org/Home/chromium-security/root-ca-policy/</p> <p>https://blog.chromium.org/2022/09/announcing-launch-of-chrome-root-program.html</p>"}]}