{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"post8/","text":"node packages updating tl;dr > npm install depcheck -g - install depcheck globally > depcheck - check for redundant packages > npm un this-redundant-package - uninstall redundant packages (repeat for all redundant packages) Create a pull-request remove-redundant-packages > npm i - make order in node_modules > npm audit - see vulnerability issues > npm audit fix - fix vulnerability issues that don't require attention Create a pull-request fix-vulnerability-issues > npm i npm-check-updates -g - install npm-check-updates globally > npm-check-updates - see how outdated packages are > npm outdated - see how outdated packages are > npm update --save - update packages respecting your semver constraints from packages.json If you have packages that use major version 0.*.* you'll need to manually update these now > npm install that-one-package@latest Create a pull-request update-packages-minor If you're brave and can test/run you project easily: 1. ncu -u - updates packages.json to all latest versions as shown by npm-check-updates - this might introduce breaking changes 1. npm i - update package-lock.json 1. Test your project. 1. Create a pull-request update-packages-major If you're not brave or can't just YOLO and update all major versions: 1. npm-check-updates - check again what is left to update 1. npm i that-package@latest - update major version of of that-package 1. Test your project. - .js is dynamically typed so you might have just updated a package that breaks your project but you'll not know until you run your code 1. Repeat for all packages. 1. Create a pull-request update-packages-major longer read Need to update dependencies in a node js project? Here are my notes on this. > npm i ( npm install ) > npm i added 60 packages, removed 124 packages, changed 191 packages, and audited 522 packages in 13s 96 packages are looking for funding run `npm fund` for details 10 vulnerabilities (2 low, 7 moderate, 1 high) To address issues that do not require attention, run: npm audit fix To address all issues possible (including breaking changes), run: npm audit fix --force Some issues need review, and may require choosing a different dependency. Run `npm audit` for details. installs missing packages in node_modules removes redundant packages in node_modules installs correct versions of mismatched packages (if packages-lock.json wants a different version than found in node_modules ) shows what is going on with packaged in your project > npm audit - shows a report on vulnerability issues in your dependencies > npm audit fix - updates packages to address vulnerability issues (updates that do not require attention) > npm outdated - shows a table with your packages and versions $ npm outdated Package Current Wanted Latest Location Depended by glob 5.0.15 5.0.15 6.0.1 node_modules/glob dependent-package-name nothingness 0.0.3 git git node_modules/nothingness dependent-package-name npm 3.5.1 3.5.2 3.5.1 node_modules/npm dependent-package-name local-dev 0.0.3 linked linked local-dev dependent-package-name once 1.3.2 1.3.3 1.3.3 node_modules/once dependent-package-name Current - what is in nodes_modules Wanted - most recent version that respect the version constraint from packages.json Latest - latest version from npm registry To update to latest minor+patch versions of your dependencies ( Wanted ) - npm outdated shows all you need to know but I prefer the output of npm-check-updates > npm i npm-check-updates -g ( -g -> global mode - package will be available on your whole machine) > npm-check-updates - shows where an update will be a major/minor/patch update (I like the colors) Checking C:\\git\\blog\\package.json [====================] 39/39 100% @azure/storage-blob ^12.5.0 \u2192 ^12.17.0 adm-zip ^0.4.16 \u2192 ^0.5.12 axios ^0.27.2 \u2192 ^1.6.8 basic-ftp ^5.0.1 \u2192 ^5.0.5 cheerio ^1.0.0-rc.6 \u2192 ^1.0.0-rc.12 eslint ^8.12.0 \u2192 ^9.2.0 eslint-config-prettier ^8.5.0 \u2192 ^9.1.0 eslint-plugin-import ^2.25.4 \u2192 ^2.29.1 fast-xml-parser ^4.2.4 \u2192 ^4.3.6 humanize-duration ^3.27.3 \u2192 ^3.32.0 iconv ^3.0.0 \u2192 ^3.0.1 jsonwebtoken ^9.0.0 \u2192 ^9.0.2 luxon ^3.4.3 \u2192 ^3.4.4 Let us update something > npm update - perform updates respecting your semver constraints and update package-lock.json > npm update --save - same as above but also update packages.json , use this one always The behavior for packages with major version 0.*.* is different than for versions >= 1.0.0 (see npm help update ) npm update will most likely bump all minor and patch versions for you. You can run npm update --save often. What do the symbols in package.json mean? https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json/25861938#25861938 npm update --save vs npm audit fix npm audit fix will only update packages to fix vulnerability issues npm update --save will update all packages it can (respecting semver constraints) Do I have unused dependencies? > npm install depcheck -g > depcheck - shows unused dependencies. depcheck scans for require / import statements in your code so you might be utilizing a package differently but depcheck will consider it unused (ex. when you import packages using importLazy ). npm-check > npm i npm-check -g > npm-check - a different tool to help with dependencies (I didn't use it) honorable mentions > npm ls - list installed packages (from node_modules ) > npm ls axios - show all versions of axios and why we have them npm ls will not show you origin of not-installed optional dependencies. Consider this - you devleop on a win maching and deploy your solution to a linux box. On windows (see below) you might think node-gyp-build is not used in your solution. > npm ls node-gyp-build test-npm@1.0.0 C:\\git\\test-npm `-- (empty) But on a linux box it will be used: > npm ls node-gyp-build npm-test-proj@1.0.0 /git/npm-test-proj \u2514\u2500\u252c kafka-lz4-lite@1.0.5 \u2514\u2500\u252c piscina@3.2.0 \u2514\u2500\u252c nice-napi@1.0.2 \u2514\u2500\u2500 node-gyp-build@4.8.1","title":"post8"},{"location":"post8/#node-packages-updating","text":"","title":"node packages updating"},{"location":"post8/#tldr","text":"> npm install depcheck -g - install depcheck globally > depcheck - check for redundant packages > npm un this-redundant-package - uninstall redundant packages (repeat for all redundant packages) Create a pull-request remove-redundant-packages > npm i - make order in node_modules > npm audit - see vulnerability issues > npm audit fix - fix vulnerability issues that don't require attention Create a pull-request fix-vulnerability-issues > npm i npm-check-updates -g - install npm-check-updates globally > npm-check-updates - see how outdated packages are > npm outdated - see how outdated packages are > npm update --save - update packages respecting your semver constraints from packages.json If you have packages that use major version 0.*.* you'll need to manually update these now > npm install that-one-package@latest Create a pull-request update-packages-minor If you're brave and can test/run you project easily: 1. ncu -u - updates packages.json to all latest versions as shown by npm-check-updates - this might introduce breaking changes 1. npm i - update package-lock.json 1. Test your project. 1. Create a pull-request update-packages-major If you're not brave or can't just YOLO and update all major versions: 1. npm-check-updates - check again what is left to update 1. npm i that-package@latest - update major version of of that-package 1. Test your project. - .js is dynamically typed so you might have just updated a package that breaks your project but you'll not know until you run your code 1. Repeat for all packages. 1. Create a pull-request update-packages-major","title":"tl;dr"},{"location":"post8/#longer-read","text":"Need to update dependencies in a node js project? Here are my notes on this. > npm i ( npm install ) > npm i added 60 packages, removed 124 packages, changed 191 packages, and audited 522 packages in 13s 96 packages are looking for funding run `npm fund` for details 10 vulnerabilities (2 low, 7 moderate, 1 high) To address issues that do not require attention, run: npm audit fix To address all issues possible (including breaking changes), run: npm audit fix --force Some issues need review, and may require choosing a different dependency. Run `npm audit` for details. installs missing packages in node_modules removes redundant packages in node_modules installs correct versions of mismatched packages (if packages-lock.json wants a different version than found in node_modules ) shows what is going on with packaged in your project > npm audit - shows a report on vulnerability issues in your dependencies > npm audit fix - updates packages to address vulnerability issues (updates that do not require attention) > npm outdated - shows a table with your packages and versions $ npm outdated Package Current Wanted Latest Location Depended by glob 5.0.15 5.0.15 6.0.1 node_modules/glob dependent-package-name nothingness 0.0.3 git git node_modules/nothingness dependent-package-name npm 3.5.1 3.5.2 3.5.1 node_modules/npm dependent-package-name local-dev 0.0.3 linked linked local-dev dependent-package-name once 1.3.2 1.3.3 1.3.3 node_modules/once dependent-package-name Current - what is in nodes_modules Wanted - most recent version that respect the version constraint from packages.json Latest - latest version from npm registry To update to latest minor+patch versions of your dependencies ( Wanted ) - npm outdated shows all you need to know but I prefer the output of npm-check-updates > npm i npm-check-updates -g ( -g -> global mode - package will be available on your whole machine) > npm-check-updates - shows where an update will be a major/minor/patch update (I like the colors) Checking C:\\git\\blog\\package.json [====================] 39/39 100% @azure/storage-blob ^12.5.0 \u2192 ^12.17.0 adm-zip ^0.4.16 \u2192 ^0.5.12 axios ^0.27.2 \u2192 ^1.6.8 basic-ftp ^5.0.1 \u2192 ^5.0.5 cheerio ^1.0.0-rc.6 \u2192 ^1.0.0-rc.12 eslint ^8.12.0 \u2192 ^9.2.0 eslint-config-prettier ^8.5.0 \u2192 ^9.1.0 eslint-plugin-import ^2.25.4 \u2192 ^2.29.1 fast-xml-parser ^4.2.4 \u2192 ^4.3.6 humanize-duration ^3.27.3 \u2192 ^3.32.0 iconv ^3.0.0 \u2192 ^3.0.1 jsonwebtoken ^9.0.0 \u2192 ^9.0.2 luxon ^3.4.3 \u2192 ^3.4.4","title":"longer read"},{"location":"post8/#let-us-update-something","text":"> npm update - perform updates respecting your semver constraints and update package-lock.json > npm update --save - same as above but also update packages.json , use this one always The behavior for packages with major version 0.*.* is different than for versions >= 1.0.0 (see npm help update ) npm update will most likely bump all minor and patch versions for you. You can run npm update --save often.","title":"Let us update something"},{"location":"post8/#what-do-the-symbols-in-packagejson-mean","text":"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json/25861938#25861938","title":"What do the symbols in package.json mean?"},{"location":"post8/#npm-update-save-vs-npm-audit-fix","text":"npm audit fix will only update packages to fix vulnerability issues npm update --save will update all packages it can (respecting semver constraints)","title":"npm update --save vs npm audit fix"},{"location":"post8/#do-i-have-unused-dependencies","text":"> npm install depcheck -g > depcheck - shows unused dependencies. depcheck scans for require / import statements in your code so you might be utilizing a package differently but depcheck will consider it unused (ex. when you import packages using importLazy ).","title":"Do I have unused dependencies?"},{"location":"post8/#npm-check","text":"> npm i npm-check -g > npm-check - a different tool to help with dependencies (I didn't use it)","title":"npm-check"},{"location":"post8/#honorable-mentions","text":"> npm ls - list installed packages (from node_modules ) > npm ls axios - show all versions of axios and why we have them npm ls will not show you origin of not-installed optional dependencies. Consider this - you devleop on a win maching and deploy your solution to a linux box. On windows (see below) you might think node-gyp-build is not used in your solution. > npm ls node-gyp-build test-npm@1.0.0 C:\\git\\test-npm `-- (empty) But on a linux box it will be used: > npm ls node-gyp-build npm-test-proj@1.0.0 /git/npm-test-proj \u2514\u2500\u252c kafka-lz4-lite@1.0.5 \u2514\u2500\u252c piscina@3.2.0 \u2514\u2500\u252c nice-napi@1.0.2 \u2514\u2500\u2500 node-gyp-build@4.8.1","title":"honorable mentions"},{"location":"post9/","text":"Notes on keys, certs, certificates, HTTPS, SSL, SSH, TLS key != cert (a key is different from a certificate) Keys are used to encrypt connections, certs are used to verify that the key owner is who he says he is. Certificate aka cert A certificate proves that a public key belongs to a given entity. The cert includes: - public key - information about the key - CA's signature validating the cert CA's signature basically says \"I confirm that this public key belongs to this person/entity\". The signature is made using CA's private key. This is wikipedia certificate which I've exported from my chrome browser. This is the certificate in PEM format. -----BEGIN CERTIFICATE----- MIIISzCCB9GgAwIBAgIQB0GeOVg6THbPHqFDR/pfOjAKBggqhkjOPQQDAzBWMQsw CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMTAwLgYDVQQDEydEaWdp Q2VydCBUTFMgSHlicmlkIEVDQyBTSEEzODQgMjAyMCBDQTEwHhcNMjMxMDE4MDAw MDAwWhcNMjQxMDE2MjM1OTU5WjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2Fs aWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEjMCEGA1UEChMaV2lraW1l ZGlhIEZvdW5kYXRpb24sIEluYy4xGDAWBgNVBAMMDyoud2lraXBlZGlhLm9yZzBZ MBMGByqGSM49AgEGCCqGSM49AwEHA0IABDVh9CEa/2rEO/oGR8YZbr5wOPHcFrG8 OBQS1BQrHAsxgVn1Z/bnKtE8Hvqup+0GXdZvXYlMa8iw4A+Dz/XTitqjggZcMIIG WDAfBgNVHSMEGDAWgBQKvAgpF4ylOW16Ds4zxy6z7fvDejAdBgNVHQ4EFgQUyqwM Z6LjhkM/u0PnQdmhhzp43TMwggLtBgNVHREEggLkMIIC4IIPKi53aWtpcGVkaWEu b3Jngg13aWtpbWVkaWEub3Jngg1tZWRpYXdpa2kub3Jngg13aWtpYm9va3Mub3Jn ggx3aWtpZGF0YS5vcmeCDHdpa2luZXdzLm9yZ4INd2lraXF1b3RlLm9yZ4IOd2lr aXNvdXJjZS5vcmeCD3dpa2l2ZXJzaXR5Lm9yZ4IOd2lraXZveWFnZS5vcmeCDndp a3Rpb25hcnkub3Jnghd3aWtpbWVkaWFmb3VuZGF0aW9uLm9yZ4IGdy53aWtpghJ3 bWZ1c2VyY29udGVudC5vcmeCESoubS53aWtpcGVkaWEub3Jngg8qLndpa2ltZWRp YS5vcmeCESoubS53aWtpbWVkaWEub3JnghYqLnBsYW5ldC53aWtpbWVkaWEub3Jn gg8qLm1lZGlhd2lraS5vcmeCESoubS5tZWRpYXdpa2kub3Jngg8qLndpa2lib29r cy5vcmeCESoubS53aWtpYm9va3Mub3Jngg4qLndpa2lkYXRhLm9yZ4IQKi5tLndp a2lkYXRhLm9yZ4IOKi53aWtpbmV3cy5vcmeCECoubS53aWtpbmV3cy5vcmeCDyou d2lraXF1b3RlLm9yZ4IRKi5tLndpa2lxdW90ZS5vcmeCECoud2lraXNvdXJjZS5v cmeCEioubS53aWtpc291cmNlLm9yZ4IRKi53aWtpdmVyc2l0eS5vcmeCEyoubS53 aWtpdmVyc2l0eS5vcmeCECoud2lraXZveWFnZS5vcmeCEioubS53aWtpdm95YWdl Lm9yZ4IQKi53aWt0aW9uYXJ5Lm9yZ4ISKi5tLndpa3Rpb25hcnkub3JnghkqLndp a2ltZWRpYWZvdW5kYXRpb24ub3JnghQqLndtZnVzZXJjb250ZW50Lm9yZ4INd2lr aXBlZGlhLm9yZ4IRd2lraWZ1bmN0aW9ucy5vcmeCEyoud2lraWZ1bmN0aW9ucy5v cmcwPgYDVR0gBDcwNTAzBgZngQwBAgIwKTAnBggrBgEFBQcCARYbaHR0cDovL3d3 dy5kaWdpY2VydC5jb20vQ1BTMA4GA1UdDwEB/wQEAwIDiDAdBgNVHSUEFjAUBggr BgEFBQcDAQYIKwYBBQUHAwIwgZsGA1UdHwSBkzCBkDBGoESgQoZAaHR0cDovL2Ny bDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VExTSHlicmlkRUNDU0hBMzg0MjAyMENB MS0xLmNybDBGoESgQoZAaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0 VExTSHlicmlkRUNDU0hBMzg0MjAyMENBMS0xLmNybDCBhQYIKwYBBQUHAQEEeTB3 MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wTwYIKwYBBQUH MAKGQ2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU0h5YnJp ZEVDQ1NIQTM4NDIwMjBDQTEtMS5jcnQwDAYDVR0TAQH/BAIwADCCAYAGCisGAQQB 1nkCBAIEggFwBIIBbAFqAHcA7s3QZNXbGs7FXLedtM0TojKHRny87N7DUUhZRnEf tZsAAAGLQ1J6cgAABAMASDBGAiEA5reeeuLSzGPvJQ5hT3Bd8aOVxmIltXMTLhY6 19qDGWUCIQDO0LMbF3s42tyxgFIOt7rVOpsHe9Sy0wFQQj8BWO0LIQB2AEiw42va pkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABi0NSegEAAAQDAEcwRQIgYJdu BrioIun6FTeQhDxqK2eyZehguOkxScS3nwsGSakCIQC1FyuCpm+QQBRJFSTAnStR iP+hgGIhgzyZ837usahB0QB3ANq2v2s/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI 1/urAAABi0NSeg8AAAQDAEgwRgIhAOm1GvY8M4V+tUyjV9/PCj8rcWHUOvfY0a/o nsKg/bitAiEA1Vm1pP8CDp7hGcQzBBTscpCVebzWCe8DK231mtv97QUwCgYIKoZI zj0EAwMDaAAwZQIwKuOOLjmwGgtjG6SASF4W2e8KtQZANRsYXMXJDGwBCi9fM7Qy S9dvlFLwrcDg1gxlAjEA5XwJikbpk/qyQerzeUspuZKhqh1KPuj2uBdp8vicuBxu TJUd1W+d3LmikOUgGzil -----END CERTIFICATE----- We can double click the cert file to view it (on Windows) or use many other different tools to view its content. https://stackoverflow.com/questions/9758238/how-to-view-the-contents-of-a-pem-certificate > $cert = New-Object Security.Cryptography.X509Certificates.X509Certificate2([string]\"C:\\Users\\inwen\\Downloads\\_.wikipedia.org.crt\") > $cert | select * EnhancedKeyUsageList : {Server Authentication (1.3.6.1.5.5.7.3.1), Client Authentication (1.3.6.1.5.5.7.3.2)} DnsNameList : {*.wikipedia.org, wikimedia.org, mediawiki.org, wikibooks.org...} SendAsTrustedIssuer : False Archived : False Extensions : {System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid...} FriendlyName : IssuerName : System.Security.Cryptography.X509Certificates.X500DistinguishedName NotAfter : 17/10/2024 01:59:59 NotBefore : 18/10/2023 02:00:00 HasPrivateKey : False PrivateKey : PublicKey : System.Security.Cryptography.X509Certificates.PublicKey RawData : {48, 130, 8, 75...} SerialNumber : 07419E39583A4C76CF1EA14347FA5F3A SubjectName : System.Security.Cryptography.X509Certificates.X500DistinguishedName SignatureAlgorithm : System.Security.Cryptography.Oid Thumbprint : 483F0C71F34AE0EA30D99BD60463DCDAA8F49DFB Version : 3 Handle : 2140299849504 Issuer : CN=DigiCert TLS Hybrid ECC SHA384 2020 CA1, O=DigiCert Inc, C=US Subject : CN=*.wikipedia.org, O=\"Wikimedia Foundation, Inc.\", L=San Francisco, S=California, C=US SSL & TLS & SSH & SFTP SSH (Secure SHell protocol) - protocol that allows to execute shell commands over a secure connection. SFTP is an extension of SSH. SFTP != FTP over SSH. To connect to a SFTP server you need a private ssh key. The public ssh key (your private key's counterpart) is stored at the server. TLS & SSL - think of SSL as the older/first protocol for secure communication. SSL was outphased by TLS. TLS is THE protocol used by HTTPS for secure connections. Clients can be anonymous in TLS - usually the case on web - the server provides a cert to your browser but you don't need a cert of your own. TLS can be mutual - if the client has a cert the servers will/can validate it. PuTTy PuTTy is free+open source software than can do SSH. PuTTy has its own format of key files -> .ppk ppk - putty private key (ppk can be changed to pem with some software) A PPK file stores a private key, and the corresponding public key. Both are contained in the same file. https://tartarus.org/~simon/putty-snapshots/htmldoc/AppendixC.html PEM Privacy-Enhanced Mail (PEM) is THE file format for exhanging keys, certificates. .cer & .crt - PEM file with a certificate .key - PEM with with a private or public key The file extensions doesn't really matter. Just open the file and see the headers to be sure what it is. To view a pem certificate on Windows - rename it to .crt and double click. You can open a .pem file as plain text as see its content: // pem ignores stuff between the headers so you can put comments here -----BEGIN RSA PRIVATE KEY----- izfrNTmQLnfsLzi2Wb9xPz2Qj9fQYGgeug3N2MkDuVHwpPcgkhHkJgCQuuvT+qZI MbS2U6wTS24SZk5RunJIUkitRKeWWMS28SLGfkDs1bBYlSPa5smAd3/q1OePi4ae dU6YgWuDxzBAKEKVSUu6pA2HOdyQ9N4F1dI+F8w9J990zE93EgyNqZFBBa2L70h4 M7DrB0gJBWMdUMoxGnun5glLiCMo2JrHZ9RkMiallS1sHMhELx2UAlP8I1+0Mav8 iMlHGyUW8EJy0paVf09MPpceEcVwDBeX0+G4UQlO551GTFtOSRjcD8U+GkCzka9W /SFQrSGe3Gh3SDaOw/4JEMAjWPDLiCglwh0rLIO4VwU6AxzTCuCw3d1ZxQsU6VFQ PqHA8haOUATZIrp3886PBThVqALBk9p1Nqn51bXLh13Zy9DZIVx4Z5Ioz/EGuzgR d68VW5wybLjYE2r6Q9nHpitSZ4ZderwjIZRes67HdxYFw8unm4Wo6kuGnb5jSSag vwBxKzAf3Omn+J6IthTJKuDd13rKZGMcRpQQ6VstwihYt1TahQ/qfJUWPjPcU5ML 9LkgVwA8Ndi1wp1/sEPe+UlL16L6vO9jUHcueWN7+zSUOE/cDSJyMd9x/ZL8QASA ETd5dujVIqlINL2vJKr1o4T+i0RsnpfFiqFmBKlFqww/SKzJeChdyEtpa/dJMrt2 8S86b6zEmkser+SDYgGketS2DZ4hB+vh2ujSXmS8Gkwrn+BfHMzkbtio8lWbGw0l eM1tfdFZ6wMTLkxRhBkBK4JiMiUMvpERyPib6a2L6iXTfH+3RUDS6A== -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- MIICMzCCAZygAwIBAgIJALiPnVsvq8dsMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNV BAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNVBAcTA2ZvbzEMMAoGA1UEChMDZm9v MQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2ZvbzAeFw0xMzAzMTkxNTQwMTlaFw0x ODAzMTgxNTQwMTlaMFMxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNV BAcTA2ZvbzEMMAoGA1UEChMDZm9vMQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2Zv bzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAzdGfxi9CNbMf1UUcvDQh7MYB OveIHyc0E0KIbhjK5FkCBU4CiZrbfHagaW7ZEcN0tt3EvpbOMxxc/ZQU2WN/s/wP xph0pSfsfFsTKM4RhTWD2v4fgk+xZiKd1p0+L4hTtpwnEw0uXRVd0ki6muwV5y/P +5FHUeldq+pgTcgzuK8CAwEAAaMPMA0wCwYDVR0PBAQDAgLkMA0GCSqGSIb3DQEB BQUAA4GBAJiDAAtY0mQQeuxWdzLRzXmjvdSuL9GoyT3BF/jSnpxz5/58dba8pWen v3pj4P3w5DoOso0rzkZy2jEsEitlVM2mLSbQpMM+MUVQCQoiG6W9xuCFuxSrwPIS pAqEAuV4DNoxQKKWmhVv+J0ptMWD25Pnpxeq5sXzghfJnslJlQND -----END CERTIFICATE----- Contents between header and footer ( -----BEGIN CERTIFICATE----- + -----END CERTIFICATE----- ) is base64 encoded. The content can be DER binary data. DER Distinguished Encoding Rules - is a way of encoding data structures. A certificate is a data structure containing various entires like validity date , issuer , etc. For certificates to work you need to store this information and transfer it. DER encodes this information is a binary format. This is then after base64 encoded and then it goes into a PEM file. X.509 X.509 is the standard defining public key certificates for TLS/SSL (HTTPS) PFX PFX seems to be Microsoft's complicated file format for storing cryptographic data. base64 offline decoder: https://www.glezen.org/Base64Decoder.html Nice description of certs vs key: https://superuser.com/questions/620121/what-is-the-difference-between-a-certificate-and-a-key-with-respect-to-ssl Generate yourself a certificate: https://getacert.com/index.html Important info on rejectUnauthorized: false and certificates in axios / node : https://stackoverflow.com/questions/51363855/how-to-configure-axios-to-use-ssl-certificate convention - propose - specify format in secret name - use plain - not base64 encoded Lazy websites Website's certificates are usually signed by intermediate CA, which in turn are signed by a trusted root CA. The idea is that the server you connect to send you its certificate with all the intermediate certificates. Your app/machine should have the root CA certificate stored so it can validate the chain of certificates it received from the server (by just validating the root cert sent with its own root CA). Some servers are misconfigured and do not send the intermediate certificates. You do not notice because browsers fill in the gaps for a better browsing experience. However when you try to scrape the same website with ex. node your connection will be rejected. don't's (for node) Many answers on SO suggest to set NODE_TLS_REJECT_UNAUTHORIZED=0 or const httpsAgent = new https.Agent({ rejectUnauthorized: false }); . Both are a terrible idea as it tells node to ignore certificate validation. Read more here does (for node) Use NODE_EXTRA_CA_CERTS . Alternatively use a library to programmatically give node the missing certificate link Good read - https://stackoverflow.com/questions/31673587/error-unable-to-verify-the-first-certificate-in-nodejs root CA stores Node It seems everyone has their own root CA store these days. Nodes has a hardcoded list of root CA see: - https://github.com/nodejs/node/blob/main/src/node_root_certs.h - https://github.com/nodejs/node/issues/4175 Windows You can view Windows certificates with PowerShell: Get-ChildItem -Recurse Cert: Chrome https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md If you would like to become chrome's trusted CA - https://www.chromium.org/Home/chromium-security/root-ca-policy/ https://blog.chromium.org/2022/09/announcing-launch-of-chrome-root-program.html","title":"post9"},{"location":"post9/#notes-on-keys-certs-certificates-https-ssl-ssh-tls","text":"key != cert (a key is different from a certificate) Keys are used to encrypt connections, certs are used to verify that the key owner is who he says he is.","title":"Notes on keys, certs, certificates, HTTPS, SSL, SSH, TLS"},{"location":"post9/#certificate-aka-cert","text":"A certificate proves that a public key belongs to a given entity. The cert includes: - public key - information about the key - CA's signature validating the cert CA's signature basically says \"I confirm that this public key belongs to this person/entity\". The signature is made using CA's private key. This is wikipedia certificate which I've exported from my chrome browser. This is the certificate in PEM format. -----BEGIN CERTIFICATE----- MIIISzCCB9GgAwIBAgIQB0GeOVg6THbPHqFDR/pfOjAKBggqhkjOPQQDAzBWMQsw CQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMTAwLgYDVQQDEydEaWdp Q2VydCBUTFMgSHlicmlkIEVDQyBTSEEzODQgMjAyMCBDQTEwHhcNMjMxMDE4MDAw MDAwWhcNMjQxMDE2MjM1OTU5WjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2Fs aWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEjMCEGA1UEChMaV2lraW1l ZGlhIEZvdW5kYXRpb24sIEluYy4xGDAWBgNVBAMMDyoud2lraXBlZGlhLm9yZzBZ MBMGByqGSM49AgEGCCqGSM49AwEHA0IABDVh9CEa/2rEO/oGR8YZbr5wOPHcFrG8 OBQS1BQrHAsxgVn1Z/bnKtE8Hvqup+0GXdZvXYlMa8iw4A+Dz/XTitqjggZcMIIG WDAfBgNVHSMEGDAWgBQKvAgpF4ylOW16Ds4zxy6z7fvDejAdBgNVHQ4EFgQUyqwM Z6LjhkM/u0PnQdmhhzp43TMwggLtBgNVHREEggLkMIIC4IIPKi53aWtpcGVkaWEu b3Jngg13aWtpbWVkaWEub3Jngg1tZWRpYXdpa2kub3Jngg13aWtpYm9va3Mub3Jn ggx3aWtpZGF0YS5vcmeCDHdpa2luZXdzLm9yZ4INd2lraXF1b3RlLm9yZ4IOd2lr aXNvdXJjZS5vcmeCD3dpa2l2ZXJzaXR5Lm9yZ4IOd2lraXZveWFnZS5vcmeCDndp a3Rpb25hcnkub3Jnghd3aWtpbWVkaWFmb3VuZGF0aW9uLm9yZ4IGdy53aWtpghJ3 bWZ1c2VyY29udGVudC5vcmeCESoubS53aWtpcGVkaWEub3Jngg8qLndpa2ltZWRp YS5vcmeCESoubS53aWtpbWVkaWEub3JnghYqLnBsYW5ldC53aWtpbWVkaWEub3Jn gg8qLm1lZGlhd2lraS5vcmeCESoubS5tZWRpYXdpa2kub3Jngg8qLndpa2lib29r cy5vcmeCESoubS53aWtpYm9va3Mub3Jngg4qLndpa2lkYXRhLm9yZ4IQKi5tLndp a2lkYXRhLm9yZ4IOKi53aWtpbmV3cy5vcmeCECoubS53aWtpbmV3cy5vcmeCDyou d2lraXF1b3RlLm9yZ4IRKi5tLndpa2lxdW90ZS5vcmeCECoud2lraXNvdXJjZS5v cmeCEioubS53aWtpc291cmNlLm9yZ4IRKi53aWtpdmVyc2l0eS5vcmeCEyoubS53 aWtpdmVyc2l0eS5vcmeCECoud2lraXZveWFnZS5vcmeCEioubS53aWtpdm95YWdl Lm9yZ4IQKi53aWt0aW9uYXJ5Lm9yZ4ISKi5tLndpa3Rpb25hcnkub3JnghkqLndp a2ltZWRpYWZvdW5kYXRpb24ub3JnghQqLndtZnVzZXJjb250ZW50Lm9yZ4INd2lr aXBlZGlhLm9yZ4IRd2lraWZ1bmN0aW9ucy5vcmeCEyoud2lraWZ1bmN0aW9ucy5v cmcwPgYDVR0gBDcwNTAzBgZngQwBAgIwKTAnBggrBgEFBQcCARYbaHR0cDovL3d3 dy5kaWdpY2VydC5jb20vQ1BTMA4GA1UdDwEB/wQEAwIDiDAdBgNVHSUEFjAUBggr BgEFBQcDAQYIKwYBBQUHAwIwgZsGA1UdHwSBkzCBkDBGoESgQoZAaHR0cDovL2Ny bDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VExTSHlicmlkRUNDU0hBMzg0MjAyMENB MS0xLmNybDBGoESgQoZAaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0 VExTSHlicmlkRUNDU0hBMzg0MjAyMENBMS0xLmNybDCBhQYIKwYBBQUHAQEEeTB3 MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wTwYIKwYBBQUH MAKGQ2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU0h5YnJp ZEVDQ1NIQTM4NDIwMjBDQTEtMS5jcnQwDAYDVR0TAQH/BAIwADCCAYAGCisGAQQB 1nkCBAIEggFwBIIBbAFqAHcA7s3QZNXbGs7FXLedtM0TojKHRny87N7DUUhZRnEf tZsAAAGLQ1J6cgAABAMASDBGAiEA5reeeuLSzGPvJQ5hT3Bd8aOVxmIltXMTLhY6 19qDGWUCIQDO0LMbF3s42tyxgFIOt7rVOpsHe9Sy0wFQQj8BWO0LIQB2AEiw42va pkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABi0NSegEAAAQDAEcwRQIgYJdu BrioIun6FTeQhDxqK2eyZehguOkxScS3nwsGSakCIQC1FyuCpm+QQBRJFSTAnStR iP+hgGIhgzyZ837usahB0QB3ANq2v2s/tbYin5vCu1xr6HCRcWy7UYSFNL2kPTBI 1/urAAABi0NSeg8AAAQDAEgwRgIhAOm1GvY8M4V+tUyjV9/PCj8rcWHUOvfY0a/o nsKg/bitAiEA1Vm1pP8CDp7hGcQzBBTscpCVebzWCe8DK231mtv97QUwCgYIKoZI zj0EAwMDaAAwZQIwKuOOLjmwGgtjG6SASF4W2e8KtQZANRsYXMXJDGwBCi9fM7Qy S9dvlFLwrcDg1gxlAjEA5XwJikbpk/qyQerzeUspuZKhqh1KPuj2uBdp8vicuBxu TJUd1W+d3LmikOUgGzil -----END CERTIFICATE----- We can double click the cert file to view it (on Windows) or use many other different tools to view its content. https://stackoverflow.com/questions/9758238/how-to-view-the-contents-of-a-pem-certificate > $cert = New-Object Security.Cryptography.X509Certificates.X509Certificate2([string]\"C:\\Users\\inwen\\Downloads\\_.wikipedia.org.crt\") > $cert | select * EnhancedKeyUsageList : {Server Authentication (1.3.6.1.5.5.7.3.1), Client Authentication (1.3.6.1.5.5.7.3.2)} DnsNameList : {*.wikipedia.org, wikimedia.org, mediawiki.org, wikibooks.org...} SendAsTrustedIssuer : False Archived : False Extensions : {System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid...} FriendlyName : IssuerName : System.Security.Cryptography.X509Certificates.X500DistinguishedName NotAfter : 17/10/2024 01:59:59 NotBefore : 18/10/2023 02:00:00 HasPrivateKey : False PrivateKey : PublicKey : System.Security.Cryptography.X509Certificates.PublicKey RawData : {48, 130, 8, 75...} SerialNumber : 07419E39583A4C76CF1EA14347FA5F3A SubjectName : System.Security.Cryptography.X509Certificates.X500DistinguishedName SignatureAlgorithm : System.Security.Cryptography.Oid Thumbprint : 483F0C71F34AE0EA30D99BD60463DCDAA8F49DFB Version : 3 Handle : 2140299849504 Issuer : CN=DigiCert TLS Hybrid ECC SHA384 2020 CA1, O=DigiCert Inc, C=US Subject : CN=*.wikipedia.org, O=\"Wikimedia Foundation, Inc.\", L=San Francisco, S=California, C=US","title":"Certificate aka cert"},{"location":"post9/#ssl-tls-ssh-sftp","text":"SSH (Secure SHell protocol) - protocol that allows to execute shell commands over a secure connection. SFTP is an extension of SSH. SFTP != FTP over SSH. To connect to a SFTP server you need a private ssh key. The public ssh key (your private key's counterpart) is stored at the server. TLS & SSL - think of SSL as the older/first protocol for secure communication. SSL was outphased by TLS. TLS is THE protocol used by HTTPS for secure connections. Clients can be anonymous in TLS - usually the case on web - the server provides a cert to your browser but you don't need a cert of your own. TLS can be mutual - if the client has a cert the servers will/can validate it.","title":"SSL &amp; TLS &amp; SSH &amp; SFTP"},{"location":"post9/#putty","text":"PuTTy is free+open source software than can do SSH. PuTTy has its own format of key files -> .ppk ppk - putty private key (ppk can be changed to pem with some software) A PPK file stores a private key, and the corresponding public key. Both are contained in the same file. https://tartarus.org/~simon/putty-snapshots/htmldoc/AppendixC.html","title":"PuTTy"},{"location":"post9/#pem","text":"Privacy-Enhanced Mail (PEM) is THE file format for exhanging keys, certificates. .cer & .crt - PEM file with a certificate .key - PEM with with a private or public key The file extensions doesn't really matter. Just open the file and see the headers to be sure what it is. To view a pem certificate on Windows - rename it to .crt and double click. You can open a .pem file as plain text as see its content: // pem ignores stuff between the headers so you can put comments here -----BEGIN RSA PRIVATE KEY----- izfrNTmQLnfsLzi2Wb9xPz2Qj9fQYGgeug3N2MkDuVHwpPcgkhHkJgCQuuvT+qZI MbS2U6wTS24SZk5RunJIUkitRKeWWMS28SLGfkDs1bBYlSPa5smAd3/q1OePi4ae dU6YgWuDxzBAKEKVSUu6pA2HOdyQ9N4F1dI+F8w9J990zE93EgyNqZFBBa2L70h4 M7DrB0gJBWMdUMoxGnun5glLiCMo2JrHZ9RkMiallS1sHMhELx2UAlP8I1+0Mav8 iMlHGyUW8EJy0paVf09MPpceEcVwDBeX0+G4UQlO551GTFtOSRjcD8U+GkCzka9W /SFQrSGe3Gh3SDaOw/4JEMAjWPDLiCglwh0rLIO4VwU6AxzTCuCw3d1ZxQsU6VFQ PqHA8haOUATZIrp3886PBThVqALBk9p1Nqn51bXLh13Zy9DZIVx4Z5Ioz/EGuzgR d68VW5wybLjYE2r6Q9nHpitSZ4ZderwjIZRes67HdxYFw8unm4Wo6kuGnb5jSSag vwBxKzAf3Omn+J6IthTJKuDd13rKZGMcRpQQ6VstwihYt1TahQ/qfJUWPjPcU5ML 9LkgVwA8Ndi1wp1/sEPe+UlL16L6vO9jUHcueWN7+zSUOE/cDSJyMd9x/ZL8QASA ETd5dujVIqlINL2vJKr1o4T+i0RsnpfFiqFmBKlFqww/SKzJeChdyEtpa/dJMrt2 8S86b6zEmkser+SDYgGketS2DZ4hB+vh2ujSXmS8Gkwrn+BfHMzkbtio8lWbGw0l eM1tfdFZ6wMTLkxRhBkBK4JiMiUMvpERyPib6a2L6iXTfH+3RUDS6A== -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- MIICMzCCAZygAwIBAgIJALiPnVsvq8dsMA0GCSqGSIb3DQEBBQUAMFMxCzAJBgNV BAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNVBAcTA2ZvbzEMMAoGA1UEChMDZm9v MQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2ZvbzAeFw0xMzAzMTkxNTQwMTlaFw0x ODAzMTgxNTQwMTlaMFMxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNmb28xDDAKBgNV BAcTA2ZvbzEMMAoGA1UEChMDZm9vMQwwCgYDVQQLEwNmb28xDDAKBgNVBAMTA2Zv bzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAzdGfxi9CNbMf1UUcvDQh7MYB OveIHyc0E0KIbhjK5FkCBU4CiZrbfHagaW7ZEcN0tt3EvpbOMxxc/ZQU2WN/s/wP xph0pSfsfFsTKM4RhTWD2v4fgk+xZiKd1p0+L4hTtpwnEw0uXRVd0ki6muwV5y/P +5FHUeldq+pgTcgzuK8CAwEAAaMPMA0wCwYDVR0PBAQDAgLkMA0GCSqGSIb3DQEB BQUAA4GBAJiDAAtY0mQQeuxWdzLRzXmjvdSuL9GoyT3BF/jSnpxz5/58dba8pWen v3pj4P3w5DoOso0rzkZy2jEsEitlVM2mLSbQpMM+MUVQCQoiG6W9xuCFuxSrwPIS pAqEAuV4DNoxQKKWmhVv+J0ptMWD25Pnpxeq5sXzghfJnslJlQND -----END CERTIFICATE----- Contents between header and footer ( -----BEGIN CERTIFICATE----- + -----END CERTIFICATE----- ) is base64 encoded. The content can be DER binary data.","title":"PEM"},{"location":"post9/#der","text":"Distinguished Encoding Rules - is a way of encoding data structures. A certificate is a data structure containing various entires like validity date , issuer , etc. For certificates to work you need to store this information and transfer it. DER encodes this information is a binary format. This is then after base64 encoded and then it goes into a PEM file.","title":"DER"},{"location":"post9/#x509","text":"X.509 is the standard defining public key certificates for TLS/SSL (HTTPS)","title":"X.509"},{"location":"post9/#pfx","text":"PFX seems to be Microsoft's complicated file format for storing cryptographic data. base64 offline decoder: https://www.glezen.org/Base64Decoder.html Nice description of certs vs key: https://superuser.com/questions/620121/what-is-the-difference-between-a-certificate-and-a-key-with-respect-to-ssl Generate yourself a certificate: https://getacert.com/index.html Important info on rejectUnauthorized: false and certificates in axios / node : https://stackoverflow.com/questions/51363855/how-to-configure-axios-to-use-ssl-certificate convention - propose - specify format in secret name - use plain - not base64 encoded","title":"PFX"},{"location":"post9/#lazy-websites","text":"Website's certificates are usually signed by intermediate CA, which in turn are signed by a trusted root CA. The idea is that the server you connect to send you its certificate with all the intermediate certificates. Your app/machine should have the root CA certificate stored so it can validate the chain of certificates it received from the server (by just validating the root cert sent with its own root CA). Some servers are misconfigured and do not send the intermediate certificates. You do not notice because browsers fill in the gaps for a better browsing experience. However when you try to scrape the same website with ex. node your connection will be rejected.","title":"Lazy websites"},{"location":"post9/#donts-for-node","text":"Many answers on SO suggest to set NODE_TLS_REJECT_UNAUTHORIZED=0 or const httpsAgent = new https.Agent({ rejectUnauthorized: false }); . Both are a terrible idea as it tells node to ignore certificate validation. Read more here","title":"don't's (for node)"},{"location":"post9/#does-for-node","text":"Use NODE_EXTRA_CA_CERTS . Alternatively use a library to programmatically give node the missing certificate link Good read - https://stackoverflow.com/questions/31673587/error-unable-to-verify-the-first-certificate-in-nodejs","title":"does (for node)"},{"location":"post9/#root-ca-stores","text":"","title":"root CA stores"},{"location":"post9/#node","text":"It seems everyone has their own root CA store these days. Nodes has a hardcoded list of root CA see: - https://github.com/nodejs/node/blob/main/src/node_root_certs.h - https://github.com/nodejs/node/issues/4175","title":"Node"},{"location":"post9/#windows","text":"You can view Windows certificates with PowerShell: Get-ChildItem -Recurse Cert:","title":"Windows"},{"location":"post9/#chrome","text":"https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md If you would like to become chrome's trusted CA - https://www.chromium.org/Home/chromium-security/root-ca-policy/ https://blog.chromium.org/2022/09/announcing-launch-of-chrome-root-program.html","title":"Chrome"}]}